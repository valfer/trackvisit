<?php

/**
 * @file
 * TODO: Enter file description here.
 */


/**
 * Implements hook_help().
 */
function trackvisit_help($path, $arg) {
  /* INFO:
   * The help hook is for displaying helpful messages at the top of pages indicated
   * by $section to further explain how they work. Adding certain "keywords" to the end of 
   * a given path (like admin/modules#description) will cause this text to display elsewhere
   * in the page as well (in this case, in the description section for the given module).
   */
  switch ($path) {
    case 'admin/help#trackvisit':
      return t("Track the visits of registered users to your nodes");
    // OPTIONAL: Add additional cases for other paths that should display help text.
  }
}

/**
 * Implementation of hook_menu().
 */
function trackvisit_menu() {

	// ajax call for the tooltip
	$items['ajax/visitors'] = array(
		'title' => 'Return list of visitors of this node',
		'page callback' => 'ajax_trackvisit_visitors',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	
	// admin page
	$items['admin/config/system/trackvisit'] = array(
		'title' => 'Track Visit settings',
		'description' => 'Change how Track Visit behave.',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('trackvisit_admin_settings'),
		'access arguments' => array('administer site configuration'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'trackvisit.admin.inc',
	);
	
	return $items;
}

function ajax_trackvisit_visitors($nid, $first)
{
	// per test
	$test = false;
	if ($test)
	{
		$query = db_select('users', 'u');
		$query->addField('u', 'uid', 'user_id');
		$query->orderBy('uid');
		$query->condition('uid', 56, '<=');
	}
	else
	{
		$query = db_select('trackvisit', 'tv');
		$query->distinct();
		$query->fields('tv', array('user_id'));
		$query->condition('node_id', $nid, '=');
	}
	
	$query->range($first, 10);
	$result = $query->execute();

	$tot_visitors = $result->rowCount();
	$visitors = array();
	//$index = 0;
	foreach($result as $record)
	{
		$user_fields = user_load($record->user_id);
		if (isset($user_fields->realname))
			$visitors[] = $user_fields->realname;
		else
			$visitors[] = $user_fields->name;
		//$index++;
	}
	drupal_json_output(array('status' => 0, 'data' => $visitors));
	drupal_exit();
}


/**
 * Define the field for ds
 */
function trackvisit_ds_fields_info($entity_type) {

	$fields = array();
	
	$fields['node']['trackvisit_footnote'] = array(
		'title' => t('Track Visit - Visited By ...'),
		'field_type' => DS_FIELD_TYPE_FUNCTION,
		'function' => '_trackvisit_ds_field',
	);
	
	if (isset($fields[$entity_type])) {
		
		return array($entity_type => $fields[$entity_type]);
	}
	return;
} 

/**
 * Implements hook_node_view().
 */
function trackvisit_node_view($node, $view_mode, $langcode)
{
	global $user;
	
	// no action for anonymous
	if ($user->uid == 0)
		return;

	$trackvisit_node_types = variable_get('trackvisit_node_types', array('page'));
	if (array_search($node->type, $trackvisit_node_types) === FALSE)
		return;
	
	// if the user is not the author, track the visit
	if ($user->uid != $node->uid)
	{
		// user has already seen the content?
		$args = array(
			':uid' => $user->uid,
			':nid' => $node->nid
			);
		$visit_cnt = db_query('select count(*) from trackvisit where user_id=:uid and node_id=:nid', $args)->fetchField();
		
		if ($visit_cnt == 0)	// is first visit
		{
			// insert the track record
			$table = 'trackvisit';
			$record = new stdClass();
			$record->node_id = $node->nid;
			$record->user_id = $user->uid;
			$record->time_visit = time();
			$record->view_mode = $view_mode;
			drupal_write_record($table, $record);	
			// echo 'trackvisit: ' . $user->uid . ' sta leggendo node ' . $node->nid . ' in ' . $view_mode;		
		}
	}
	return $node;
}

/**
 * Implements hook_theme().
 */
function trackvisit_theme() {
  $theme = array();
  $theme['trackvisit'] = array(
    'variables' => array(),
    'file' => 'trackvisit.theme.inc',
    'template' => 'trackvisit',
  );
  return $theme;
}

function trackvisit_preprocess_page(&$vars) {
	
	// include jquery tools
	// drupal_add_js('http://cdn.jquerytools.org/1.2.7/jquery.tools.min.js', 'external');
}

/* PRIVATES */
/**
 * Callback for showing data ds
 */
function _trackvisit_ds_field($field) {
  
	//echo '<pre>';
	//var_dump($field['entity']);
	global $user;
	
	$conf = array();
	$conf['visitInfo'] = _get_visit_info($field['entity']->nid, $field['entity']->uid);
	$conf['node_id'] = $field['entity']->nid;
	$conf['author_id'] = $field['entity']->uid;
	$conf['user_id'] = $user->uid;
	return theme('trackvisit', $conf);
}

function _can_view_visits($user, $author_id)
{
	$trackvisit_allowed = variable_get('trackvisit_allowed', 0);
	// echo $trackvisit_allowed;
	if ($user->uid == 1)				// ok anyway (you are the admin)
	{
		$can_show = true;
	}
	else if ($trackvisit_allowed == 0)	// only author
	{
		$can_show = $user->uid == $author_id;
	}
	else if ($trackvisit_allowed == 1)	// only to admin
	{
		$can_show = false;				// if you were admin you went in the first if :-)
	}
	else if ($trackvisit_allowed == 2)	// all
	{
		$can_show = true;
	}

	return $can_show;
}

/**
 * get visits info
 */
function _get_visit_info($nid, $author_id)
{
	global $user;

	$canview = _can_view_visits($user, $author_id);

	if ($canview)
	{
		/*
		$query = db_select('trackvisit', 'tv');
		$query->join('field_data_field_nome', 'df_nome', 'df_nome.entity_id = tv.user_id');
		$query->join('field_data_field_cognome', 'df_cognome', 'df_cognome.entity_id = tv.user_id');
		$query->distinct();
		$query->fields('df_nome', array('field_nome_value'))->fields('df_cognome', array('field_cognome_value'));
		$query->condition('node_id', $nid, '=');
		*/
		
		// would be better to execute distinct(userid) because multithread is not checked in trackvisit_node_view
		$args = array(':nid' => $nid);
		$tot_visits = db_query('select count(*) from trackvisit where node_id=:nid', $args)->fetchField();

		/*$query = db_select('trackvisit', 'tv');
		$query->distinct();
		$query->fields('tv', array('count(*) as cnt'));
		$query->condition('node_id', $nid, '=');
		$result = $query->execute();
		
		$tot_visits = $result->rowCount();
		*/
		/*
		$visitors = array();
		foreach($result as $record)
		{
			// $t_user = user_load($record->user_id);
			$user_fields = user_load($record->user_id);
			//echo '<pre>';
			// var_dump($user_fields);
			if (isset($user_fields->realname))
				$visitors[] = $user_fields->realname;
			else
				$visitors[] = $user_fields->name;
			// $visitors[] = $record->field_nome_value . ' ' . $record->field_cognome_value;
		}*/
		
		return array('tot_visits'=>$tot_visits);
	}
	else
	{
		return NULL;
	}
}


